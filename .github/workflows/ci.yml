
name: ci
on:
  pull_request:

env:
  FSTAR_VERSION: v2025.08.07

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2
      - id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            monitoring:
              - 'monitoring/**'
      - name: install node deps
        run: npm ci
      - name: monitor smoke
        run: |
          set -e
          make monitor --native-monitor &
          pid=$!
          sleep 5
          kill $pid
          wait $pid || true
      - name: install monitoring deps
        if: steps.changes.outputs.monitoring == 'true'
        run: npm ci --prefix monitoring
      - name: lint grafana dashboard
        if: steps.changes.outputs.monitoring == 'true'
        run: |
          set -o pipefail
          make -C monitoring lint 2>&1 | tee monitoring/lint.log
      - name: upload grafana lint log
        if: always() && steps.changes.outputs.monitoring == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-lint
          path: monitoring/lint.log
      - name: install fstar
        run: scripts/install_fstar.sh
      - name: fstar installer failure check
        run: scripts/test_install_fstar.sh
      - name: install python runtime
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.12 python3.12-dev
      - name: install just and demo venv
        run: |
          cargo install just --locked
          python3.12 -m venv .venv
      - name: demo smoke test
        run: just demo
      - name: discover libpython
        run: |
          echo "LIBPYTHON_PATH=$(python3-config --ldflags | sed -n 's/.*-L\([^ ]*\).*/\1/p')" >> $GITHUB_ENV
      - uses: taiki-e/setup-nextest@v0
      - name: cargo nextest
        run: cargo nextest run --all-features
        env:
          LD_LIBRARY_PATH: ${{ env.LIBPYTHON_PATH }}
      - name: gossip test
        run: cargo nextest run --all-features gossip_converges_to_longest_chain --retries 2
        env:
          RUST_TEST_THREADS: 1
          LD_LIBRARY_PATH: ${{ env.LIBPYTHON_PATH }}
      - name: doc tests
        run: cargo test --doc --all-features
        env:
          LD_LIBRARY_PATH: ${{ env.LIBPYTHON_PATH }}
      - name: snapshot restore
        run: scripts/snapshot_ci.sh
        env:
          LD_LIBRARY_PATH: ${{ env.LIBPYTHON_PATH }}
  wal-fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: install cargo-fuzz
        run: cargo install cargo-fuzz --locked
      - name: run wal fuzz
        run: cargo +nightly fuzz run wal_fuzz --max-total-time=60 -- -artifact_prefix=fuzz/wal/
      - name: upload wal artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: wal-fuzz
          path: fuzz/wal/
