This file summarizes the signature integration and protocol hardening.

### Overview
- Domain tag now encodes `CHAIN_ID` as little-endian bytes and is fixed 16 bytes long.
- Bincode configuration is cached using `once_cell` to avoid reallocation.
- `SignedTransaction::id` includes a version byte: `blake3(b"TX" | [TX_VERSION] | canonical_payload | public_key)`.
- Transactions carry `fee_selector` and `nonce`; nonce monotonicity is enforced on submission.
- Fee routing credits the miner based on `fee_selector` selection and deducts the same from the sender.
- Blocks embed a `difficulty` field and validation now checks the header value matches the network target.
- Account struct stores pending debit totals so multiple mempool transactions cannot overspend.
- Mempool deduplicates on `(sender, nonce)` and balances are debited only once during mining.
- Comparator unit tests verify mempool ordering by `fee_per_byte`, `expires_at`, then `tx_hash` and TTL purges increment the `ttl_drop_total` metric.
- Orphan sweep tests confirm missing-account transactions increment `orphan_sweep_total`.
- Lock-poison harnesses assert `lock_poison_total` and `tx_rejected_total` on poisoned paths.
- `serve_metrics` exports Prometheus text over HTTP and is exercised by a regression test.
- Admission panic harness proves reservation rollback when submission panics mid-flight.
- Admission panic property test validates rollback before and after
  reservation, keeping mempool and pending sets empty.
- Cross-thread fuzz harness randomizes nonces and fees over 10k iterations per
  thread to stress capacity and uniqueness invariants.
- Coinbase is enforced as the first transaction in every block.
- All signature verification uses `domain_tag || canonical_payload` for deterministic hashing.
- Blocks are rejected if any transaction ID appears more than once.
- Fees are clamped below 2^63 to avoid overflow when splitting rewards.
- Added Python interoperability test confirming bincode layouts match byte-for-byte.

### Formulas
- **Block reward decay**: `reward_n = floor(reward_0 * (DECAY_NUMERATOR / DECAY_DENOMINATOR)^n)`
- **Proof-of-work**: `leading_zero_bits(hash) >= difficulty`
- **Tx ID**: `blake3(b"TX" | [TX_VERSION] | canonical_payload | public_key)`
- **Fee routing**:
  \(\Delta C, \Delta I\) =
  \( -f, 0 \) if \(\nu = 0\);
  \( 0, -f \) if \(\nu = 1\);
  \( -\lceil f/2 \rceil, -\lfloor f/2 \rfloor \) if \(\nu = 2\).
- **Nonce rule**: `nonce = account_nonce + 1`

### Developer Notes
- Run `maturin develop --release` after Rust changes to refresh the Python extension.
- `cargo clippy --all-targets -- -D warnings` and `cargo test --release` must pass.
  Failing `clippy` hits code style or documentation; runtime behaviour is
  unaffected.
 - `.venv/bin/python demo.py` demonstrates key generation, signing, mining and runs end-to-end.

---

## Disclaimer

`the-block` is experimental research software. Nothing in this document should
be interpreted as financial advice or a production readiness guarantee.
